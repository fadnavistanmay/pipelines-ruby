# Ruby
# Package your Ruby application.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby

#pool:
#  vmImage: 'Ubuntu 16.04'

stages:
- stage: firstruntar
  displayName: 'Empty cache Tar'
  variables:
    CACHE_PACK: tar
  jobs:
  - template: azure-pipelines-jobs.yml

- stage: firstrunfiles
  displayName: 'Empty Cache Files'
  variables:
    AZP_CACHING_CONTENT_FORMAT: Files
    CACHE_PACK: files
  jobs:
  - template: azure-pipelines-jobs.yml

- stage: secondruntar
  dependsOn: firstruntar
  displayName: 'Cached TAR'
  variables:
    CACHE_PACK: tar
  jobs:
  - template: azure-pipelines-jobs.yml

- stage: secondrunfiles
  dependsOn: firstrunfiles
  displayName: 'Cached Files'
  variables:
    AZP_CACHING_CONTENT_FORMAT: Files
    CACHE_PACK: files
  jobs:
  - template: azure-pipelines-jobs.yml

variables:
  BUNDLE_PATH : $(Pipeline.Workspace)/.bundle
  CACHE_KEY: gems | $(Agent.OS) | $(Build.BuildId) | $(CACHE_PACK) | pipelines-ruby.gemspec
  system.debug: true

#steps:
#- task: UseRubyVersion@0
#  inputs:
#    versionSpec: '>= 2.5'
#
#- task: CacheBeta@1
#  inputs:
#    key: gems4 | $(Agent.OS) | pipelines-ruby.gemspec
#    path: $(BUNDLE_PATH)
#    cacheHitVar: CACHE_RESTORED
#  displayName: Cache gems
#
##- script: bundle install
##  displayName : "bundle install"
##  condition: ne(variables.CACHE_RESTORED, 'true')
#
#- script: |
#    gem install bundler
#    bundle install --retry=3 --jobs=4
#  displayName: 'bundle install'
#  condition: ne(variables.CACHE_RESTORED, 'true')
#
##- script: gem list
#
#- script: bundle exec rake
#  displayName: 'bundle exec rake'
#
## - script: bundle exec rspec spec --format RspecJunitFormatter --out test_results/TEST-rspec.xml
#
#- task: PublishTestResults@2
#  condition: succeededOrFailed()
#  inputs:
#    testResultsFiles: '**/test-*.xml'
#    testRunTitle: 'Ruby tests'
#    
#- task: PublishCodeCoverageResults@1
#  inputs:
#    codeCoverageTool: Cobertura
#    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
#    reportDirectory: '$(System.DefaultWorkingDirectory)/**/coverage'
